{"ast":null,"code":"var _jsxFileName = \"/Users/thomashimawan/react projects/wordle/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Keyboard from './Components/Keyboard';\nimport Board from './Components/Board';\nimport { createContext, useEffect, useState } from \"react\";\nimport { boardDefault, generateWordSet } from './Words';\nimport GameOver from './Components/GameOver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/createContext();\n\nfunction App() {\n  _s();\n\n  const [board, setBoard] = useState(boardDefault);\n  const [currAttempt, setCurrAttempt] = useState({\n    attempt: 0,\n    letterPos: 0\n  });\n  const [wordSet, setWordSet] = useState(new Set());\n  const [disabledLetters, setDisabledLetters] = useState([]);\n  const [gameOver, setGameOver] = useState({\n    gameOver: false,\n    guessedWord: false\n  });\n  const [correctWord, setCorrectWord] = useState('');\n  useEffect(() => {\n    generateWordSet().then(words => {\n      setWordSet(words.wordSet);\n      setCorrectWord(words.todaysWord);\n    });\n  }, []);\n\n  const onSelectLetter = keyVal => {\n    if (currAttempt.letterPos > 4) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos] = keyVal;\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt,\n      letterPos: currAttempt.letterPos + 1\n    });\n  };\n\n  const onDelete = () => {\n    if (currAttempt.letterPos === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt,\n      letterPos: currAttempt.letterPos - 1\n    });\n  };\n\n  const onEnter = () => {\n    if (currAttempt.letterPos !== 5) return;\n    let currWord = \"\";\n\n    for (let i = 0; i < 5; i++) {\n      currWord += board[currAttempt.attempt][i];\n    }\n\n    if (wordSet.has(currWord.toLowerCase())) {\n      setCurrAttempt({\n        attempt: currAttempt.attempt + 1,\n        letterPos: 0\n      });\n    } else {\n      alert(\"word not found\");\n    }\n\n    if (currWord === correctWord) {\n      setGameOver({\n        gameOver: true,\n        guessedWord: true\n      });\n      return;\n    }\n\n    if (currAttempt.attempt === 5) {\n      setGameOver({\n        gameOver: true,\n        guessedWord: false\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Wordle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        board,\n        setBoard,\n        currAttempt,\n        setCurrAttempt,\n        onDelete,\n        onSelectLetter,\n        onEnter,\n        correctWord,\n        setDisabledLetters,\n        disabledLetters,\n        gameOver,\n        setGameOver\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), gameOver.gameOver ? /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 31\n        }, this) : /*#__PURE__*/_jsxDEV(Keyboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 45\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"nEP6S1chb+ZcjD2bt3rySELyxUY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Keyboard","Board","createContext","useEffect","useState","boardDefault","generateWordSet","GameOver","AppContext","App","board","setBoard","currAttempt","setCurrAttempt","attempt","letterPos","wordSet","setWordSet","Set","disabledLetters","setDisabledLetters","gameOver","setGameOver","guessedWord","correctWord","setCorrectWord","then","words","todaysWord","onSelectLetter","keyVal","newBoard","onDelete","onEnter","currWord","i","has","toLowerCase","alert"],"sources":["/Users/thomashimawan/react projects/wordle/src/App.js"],"sourcesContent":["import './App.css';\nimport Keyboard from './Components/Keyboard';\nimport Board from './Components/Board';\nimport {createContext, useEffect, useState} from \"react\";\nimport { boardDefault, generateWordSet } from './Words'\nimport GameOver from './Components/GameOver';\nexport const AppContext = createContext();\n\nfunction App() {\n  const [board, setBoard]=useState(boardDefault);\n  const [currAttempt, setCurrAttempt] = useState({attempt:0, letterPos: 0 });\n  const [wordSet, setWordSet] = useState( new Set());\n  const [disabledLetters, setDisabledLetters] = useState([]);\n  const [gameOver, setGameOver] = useState({gameOver: false, guessedWord: false});\n  const [correctWord, setCorrectWord] = useState('');\n  \n  useEffect(() => {\n    generateWordSet().then((words) =>{\n      setWordSet(words.wordSet);\n      setCorrectWord(words.todaysWord);\n    })\n  }, [])\n\n  const onSelectLetter = (keyVal) => {\n    if(currAttempt.letterPos > 4) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos] = keyVal\n    setBoard(newBoard);\n    setCurrAttempt({...currAttempt, letterPos: currAttempt.letterPos + 1})\n  }\n\n  const onDelete = () => {\n    if(currAttempt.letterPos === 0 ) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letterPos - 1] = \"\"\n    setBoard(newBoard);\n    setCurrAttempt({...currAttempt, letterPos: currAttempt.letterPos - 1})\n  }\n  \n  const onEnter = () => {\n    if(currAttempt.letterPos !== 5) return;\n\n    let currWord = \"\";\n    for (let i =0; i < 5; i++){\n      currWord += board[currAttempt.attempt][i];\n    }\n    if(wordSet.has(currWord.toLowerCase())){\n      setCurrAttempt({attempt: currAttempt.attempt + 1, letterPos: 0})\n    } else{\n      alert(\"word not found\");\n    }\n\n    if(currWord === correctWord){\n      setGameOver({gameOver:true, guessedWord: true})\n      return;\n    }\n\n    if (currAttempt.attempt === 5){\n      setGameOver({gameOver:true, guessedWord:false});\n    }\n  }\n  return (\n    <div className=\"App\">\n      <nav>\n        <h1>Wordle</h1>\n      </nav>\n      <AppContext.Provider value ={{board,setBoard, currAttempt, setCurrAttempt, onDelete, onSelectLetter, onEnter, correctWord, setDisabledLetters, disabledLetters, gameOver, setGameOver }}>\n        <div className='game'>\n          <Board />\n          {gameOver.gameOver? <GameOver />: <Keyboard />}\n        </div>\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}